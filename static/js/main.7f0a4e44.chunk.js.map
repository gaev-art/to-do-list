{"version":3,"sources":["components/common/EditableSpan.module.css","components/common/AddNewItemForm.tsx","api/instance.ts","api/authApi.ts","redux/appReducer.ts","utils/errorUtils.ts","redux/authReducer.ts","api/todoListsApi.ts","redux/todoListsReducer.ts","api/tasksApi.ts","redux/tasksReducer.ts","redux/store.ts","components/header/Header.tsx","utils/types.ts","components/common/EditableSpan.tsx","components/todoLists/todoList/tasks/task/Task.tsx","components/todoLists/todoList/tasks/Tasks.tsx","components/todoLists/todoList/TodoList.tsx","components/todoLists/TodoLists.tsx","components/login/Login.tsx","components/common/ErrorSnackbar.tsx","components/App.tsx","reportWebVitals.ts","index.tsx","components/App.module.scss"],"names":["module","exports","AddNewItemForm","React","memo","props","useState","title","setTitle","error","setError","onAddItemClick","newTitle","trim","addItem","style","margin","height","TextField","value","onKeyPress","e","key","onChange","event","currentTarget","label","placeholder","helperText","instance","axios","create","baseURL","process","withCredentials","headers","authApi","get","then","res","data","post","delete","isInitializeAppTC","createAsyncThunk","param","thunkAPI","a","resultCode","dispatch","setIsLoggedInAC","slice","createSlice","name","initialState","status","isInitialized","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","extraReducers","builder","addCase","fulfilled","appReducer","reducer","actions","handleServerNetworkError","message","loginTC","response","captchaUrl","url","getCaptchaUrlAC","captcha","rejectWithValue","messages","logoutTC","isLoggedIn","authReducer","todoListsApi","todoListId","put","fetchTodoListsTC","todoLists","removeTodoListTC","changeTodoListEntityStatusAC","addTodoListTC","newTodoList","todoList","item","changeTodoListTitleTC","changeTodoListFilterAC","index","findIndex","tl","id","filter","entityStatus","map","splice","unshift","todoListsReducer","tasksApi","taskId","model","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","length","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","tasksReducer","forEach","rootReducer","combineReducers","auth","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","window","TaskStatuses","TaskPriorities","Header","useDispatch","addTodoList","useCallback","logout","AppBar","color","position","Toolbar","className","itemForm","Typography","variant","Button","onClick","LinearProgress","EditableSpan","isEditMode","setIsEditMode","activeEditMode","deActiveEditMode","onKeYPress","onTitleChanged","autoFocus","onBlur","span","onDoubleClick","Task","onChangeHandler","checked","Completed","New","onChangeTaskTitle","removeTask","Paper","padding","isDone","display","alignItems","justifyContent","Checkbox","left","right","Delete","fontSize","Tasks","tasksForTodoList","todoListFilter","overflowY","TodoList","demo","onChangeTodoListTitle","addTask","removeTodoList","onFilterButtonClickHandler","buttonFilter","renderFilterButton","text","useEffect","allTodolistTasks","Grid","width","elevation","textAlign","top","disabled","TodoLists","container","todo","to","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","handleSubmit","FormControl","FormLabel","href","FormGroup","getFieldProps","errors","type","FormControlLabel","control","alt","src","Alert","ErrorSnackBar","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","Container","fixed","exact","path","render","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById"],"mappings":"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","file":"static/js/main.7f0a4e44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"EditableSpan_span__2cjL0\"};","import React, {useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\ntype PropsType = {\r\n  placeholder: string\r\n  addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddNewItemForm = React.memo((props: PropsType) => {\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [error, setError] = useState<string | null>('')\r\n\r\n\r\n  const onKeYPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null)\r\n    }\r\n    if (e.key === 'Enter') {\r\n      onAddItemClick()\r\n    }\r\n  }\r\n\r\n  const onAddItemClick = () => {\r\n    let newTitle = title.trim()\r\n    if (newTitle !== '') {\r\n      props.addItem(newTitle)\r\n      setTitle('')\r\n\r\n    } else {\r\n      setError('Title is required')\r\n    }\r\n  }\r\n\r\n  const onTitleChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(event.currentTarget.value)\r\n  }\r\n\r\n\r\n  return (\r\n    <div style={{margin: '15px', height: '60px'}}>\r\n      <TextField\r\n        value={title}\r\n        onKeyPress={onKeYPress}\r\n        onChange={onTitleChanged}\r\n        label={props.placeholder}\r\n        error={!!error}\r\n        helperText={error}\r\n      />\r\n    </div>\r\n  )\r\n\r\n})\r\n","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n  baseURL: process.env.REACT_APP_BASE_URL,\r\n  withCredentials: true,\r\n  headers: {'API-KEY': process.env.REACT_APP_API_KEY}\r\n})","import {instance} from './instance'\r\nimport {LoginParamsType, ResponseType} from '../utils/types'\r\n\r\n\r\nexport const authApi = {\r\n  me() {\r\n    return instance.get<ResponseType<{ id: string, email: string, login: string }>>(`auth/me`)\r\n      .then(res => res.data)\r\n  },\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n      .then(res => res.data)\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`)\r\n  },\r\n  getCaptchaUrl() {\r\n    return instance.get(`security/get-captcha-url`)\r\n  }\r\n}","import {authApi} from '../api/authApi'\r\nimport {setIsLoggedInAC} from './authReducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\n\r\nexport const isInitializeAppTC = createAsyncThunk('app/isInitializeApp', async (param, thunkAPI) => {\r\n  const response = await authApi.me()\r\n  if (response.resultCode === 0) {\r\n    thunkAPI.dispatch(setIsLoggedInAC())\r\n  }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false as boolean\r\n  },\r\n  reducers: {\r\n    setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n      state.error = action.payload.error\r\n    },\r\n    setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n      state.status = action.payload.status\r\n    }\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(isInitializeAppTC.fulfilled, state => {\r\n      state.isInitialized = true\r\n    })\r\n  }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n","import {Dispatch} from 'redux'\r\nimport {ResponseType} from './types'\r\nimport {setAppErrorAC, setAppStatusAC} from '../redux/appReducer'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<any>) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC({error: data.messages[0]}))\r\n  } else {\r\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n  }\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<any>) => {\r\n  dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from './appReducer'\r\nimport {authApi,} from '../api/authApi'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {LoginParamsType} from '../utils/types'\r\nimport {handleServerNetworkError} from '../utils/errorUtils'\r\n\r\n\r\nexport const loginTC = createAsyncThunk(\r\n  'auth/login',\r\n  async (param: LoginParamsType, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      const response = await authApi.login(param)\r\n      if (response.resultCode === 0) {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n      } else {\r\n        if (response.resultCode === 10) {\r\n          const response = await authApi.getCaptchaUrl()\r\n          const captchaUrl = response.data.url\r\n          thunkAPI.dispatch(getCaptchaUrlAC({captcha: captchaUrl}))\r\n          return thunkAPI.rejectWithValue({})\r\n        }\r\n        thunkAPI.dispatch(setAppErrorAC({error: response.messages[0]}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n        return thunkAPI.rejectWithValue({})\r\n      }\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue({})\r\n    }\r\n  })\r\nexport const logoutTC = createAsyncThunk(\r\n  'auth/logout',\r\n  async (param, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      await authApi.logout()\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue({})\r\n    }\r\n  })\r\n\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isLoggedIn: false,\r\n    captcha: ''\r\n  },\r\n  reducers: {\r\n    setIsLoggedInAC: state => {\r\n      state.isLoggedIn = true\r\n    },\r\n    getCaptchaUrlAC: (state, action: PayloadAction<{ captcha: string }>) => {\r\n      state.captcha = action.payload.captcha\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(loginTC.fulfilled, state => {\r\n      state.isLoggedIn = true\r\n    })\r\n    builder.addCase(logoutTC.fulfilled, state => {\r\n      state.isLoggedIn = false\r\n    })\r\n  }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC, getCaptchaUrlAC} = slice.actions\r\n\r\n\r\n\r\n","import {instance} from './instance'\r\nimport {ResponseType, TodoListType} from '../utils/types'\r\n\r\nexport const todoListsApi = {\r\n  getTodoLists() {\r\n    return instance.get<TodoListType[]>('/todo-lists')\r\n      .then(res => res.data)\r\n  },\r\n  createTodoList(title: string) {\r\n    return instance.post<ResponseType<{ item: TodoListType }>>('/todo-lists', {title})\r\n      .then(res => res.data)\r\n  },\r\n  deleteTodoList(todoListId: string) {\r\n    return instance.delete<ResponseType>(`/todo-lists/${todoListId}`)\r\n      .then(res => res.data)\r\n  },\r\n  updateTitleTodoList(todoListId: string, title: string) {\r\n    return instance.put<ResponseType>(`/todo-lists/${todoListId}`, {title})\r\n      .then((res) => res.data)\r\n  },\r\n}\r\n\r\n\r\n","import {todoListsApi} from '../api/todoListsApi'\r\nimport {RequestStatusType, setAppStatusAC} from './appReducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FilterValuesType, TodoListDomainType} from '../utils/types'\r\nimport {handleServerNetworkError} from '../utils/errorUtils'\r\n\r\n\r\nexport const fetchTodoListsTC = createAsyncThunk(\r\n  'todoLists/fetchTodoLists',\r\n  async (param, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      const todoLists = await todoListsApi.getTodoLists()\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n      return {todoLists}\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue(null)\r\n    }\r\n  })\r\nexport const removeTodoListTC = createAsyncThunk(\r\n  'todoLists/removeTodoList',\r\n  async (todoListId: string, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      thunkAPI.dispatch(changeTodoListEntityStatusAC({todoListId, status: 'loading'}))\r\n      await todoListsApi.deleteTodoList(todoListId)\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n      return {todoListId}\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue(null)\r\n    }\r\n  })\r\nexport const addTodoListTC = createAsyncThunk(\r\n  'todoLists/addTodoList',\r\n  async (title: string, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      const newTodoList = await todoListsApi.createTodoList(title)\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n      return {todoList: newTodoList.data.item}\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue(null)\r\n    }\r\n  })\r\nexport const changeTodoListTitleTC = createAsyncThunk(\r\n  'todoLists/changeTodoListTitle',\r\n  async (param: { todoListId: string, title: string }, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      await todoListsApi.updateTitleTodoList(param.todoListId, param.title)\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n      return {todoListId: param.todoListId, title: param.title}\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue(null)\r\n    }\r\n  })\r\n\r\n\r\nconst slice = createSlice({\r\n  name: 'todoLists',\r\n  initialState: [] as TodoListDomainType[],\r\n  reducers: {\r\n    changeTodoListFilterAC(state, action: PayloadAction<{ todoListId: string, filter: FilterValuesType }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n      state[index].filter = action.payload.filter\r\n    },\r\n    changeTodoListEntityStatusAC(state, action: PayloadAction<{ todoListId: string, status: RequestStatusType }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n      state[index].entityStatus = action.payload.status\r\n    }\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n      return action.payload.todoLists.map(tl => ({...tl, filter: 'active', entityStatus: 'idle'}))\r\n    })\r\n    builder.addCase(removeTodoListTC.fulfilled, (state, action) => {\r\n      const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n      if (index > -1) state.splice(index, 1)\r\n    })\r\n    builder.addCase(addTodoListTC.fulfilled, (state, action) => {\r\n      state.unshift({...action.payload.todoList, filter: 'active', entityStatus: 'idle'})\r\n    })\r\n    builder.addCase(changeTodoListTitleTC.fulfilled, (state, action) => {\r\n      const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n      state[index].title = action.payload.title\r\n    })\r\n  }\r\n})\r\n\r\nexport const todoListsReducer = slice.reducer\r\nexport const {changeTodoListFilterAC, changeTodoListEntityStatusAC} = slice.actions\r\n\r\n\r\n","import {instance} from './instance'\r\nimport {GetTasksResponse, ResponseType, TaskType, UpdateTaskModelType} from '../utils/types'\r\n\r\nexport const tasksApi = {\r\n  getTasks(todoListId: string) {\r\n    return instance.get<GetTasksResponse>(`/todo-lists/${todoListId}/tasks`)\r\n\r\n  },\r\n  createTask(title: string, todoListId: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todoListId}/tasks`, {title})\r\n      .then(res => res.data)\r\n  },\r\n  deleteTask(todoListId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`/todo-lists/${todoListId}/tasks/${taskId}`)\r\n      .then(res => res.data)\r\n  },\r\n  updateTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<ResponseType<TaskType>>(`/todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n      .then(res => res.data.data)\r\n  },\r\n}\r\n\r\n","import {AppRootStateType} from './store'\r\nimport {setAppErrorAC, setAppStatusAC,} from './appReducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/errorUtils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {addTodoListTC, fetchTodoListsTC, removeTodoListTC} from './todoListsReducer'\r\nimport {tasksApi} from '../api/tasksApi'\r\nimport {TasksStateType, UpdateTaskModelType} from '../utils/types'\r\n\r\n\r\nexport const fetchTasksTC = createAsyncThunk(\r\n  'tasks/fetchTasks',\r\n  async (todoListId: string, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      const tasks = await tasksApi.getTasks(todoListId)\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n      return {tasks: tasks.data.items, todoListId}\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue(null)\r\n    }\r\n  })\r\nexport const removeTaskTC = createAsyncThunk(\r\n  'tasks/removeTask',\r\n  async (param: { taskId: string, todoListId: string }, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      const response = await tasksApi.deleteTask(param.todoListId, param.taskId)\r\n      if (response.resultCode === 0) {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n        return {taskId: param.taskId, todoListId: param.todoListId}\r\n      } else {\r\n        thunkAPI.dispatch(setAppErrorAC({error: response.messages[0]}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n        return thunkAPI.rejectWithValue(null)\r\n      }\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue(null)\r\n    }\r\n  })\r\nexport const addTaskTC = createAsyncThunk(\r\n  'tasks/addTask',\r\n  async (param: { title: string, todoListId: string }, thunkAPI) => {\r\n    try {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      const response = await tasksApi.createTask(param.title, param.todoListId)\r\n      if (response.resultCode === 0) {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n        return {task: response.data.item}\r\n      } else {\r\n        handleServerAppError(response, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n      }\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue(null)\r\n    }\r\n  })\r\nexport const updateTaskTC = createAsyncThunk(\r\n  'tasks/updateTask',\r\n  async (param: { taskId: string, model: UpdateTaskModelType, todoListId: string }, thunkAPI) => {\r\n    try {\r\n      const state = thunkAPI.getState() as AppRootStateType\r\n      const task = state.tasks[param.todoListId].find((t) => t.id === param.taskId)\r\n      if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n      }\r\n      const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model,\r\n      }\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n      await tasksApi.updateTask(param.todoListId, param.taskId, apiModel)\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\r\n      return {taskId: param.taskId, model: param.model, todoListId: param.todoListId}\r\n    } catch (error) {\r\n      handleServerNetworkError(error, thunkAPI.dispatch)\r\n      return thunkAPI.rejectWithValue(null)\r\n    }\r\n  })\r\n\r\nconst slice = createSlice({\r\n  name: 'tasks',\r\n  initialState: {} as TasksStateType,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addTodoListTC.fulfilled, (state, action) => {\r\n      state[action.payload.todoList.id] = []\r\n    })\r\n    builder.addCase(removeTodoListTC.fulfilled, (state, action) => {\r\n      delete state[action.payload.todoListId]\r\n    })\r\n    builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n      action.payload.todoLists.forEach((tl: any) => {\r\n        state[tl.id] = []\r\n      })\r\n    })\r\n    builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n      state[action.payload.task.todoListId].unshift(action.payload.task)\r\n    })\r\n      .addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n        state[action.payload.todoListId] = action.payload.tasks\r\n      })\r\n    builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n      const tasks = state[action.payload.todoListId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks.splice(index, 1)\r\n      }\r\n    })\r\n    builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n      const tasks = state[action.payload.todoListId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks[index] = {...tasks[index], ...action.payload.model}\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n","import {combineReducers} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux'\r\nimport {authReducer} from './authReducer'\r\nimport {appReducer} from './appReducer'\r\nimport {todoListsReducer} from './todoListsReducer'\r\nimport {tasksReducer} from './tasksReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  todoLists: todoListsReducer,\r\n  tasks: tasksReducer,\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {useCallback} from 'react'\r\nimport {AppBar, Button, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport style from '../App.module.scss'\r\nimport {AddNewItemForm} from '../common/AddNewItemForm'\r\nimport {useDispatch} from 'react-redux'\r\nimport {logoutTC} from '../../redux/authReducer'\r\nimport {useAppSelector} from '../../redux/store'\r\nimport {addTodoListTC} from '../../redux/todoListsReducer'\r\n\r\nexport const Header = () => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const status = useAppSelector((state) => state.app.status)\r\n  const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n\r\n  const addTodoList = useCallback((title: string) => dispatch(addTodoListTC(title)), [])\r\n  const logout = useCallback(() => dispatch(logoutTC()), [])\r\n\r\n  return (\r\n    <AppBar color=\"inherit\" position=\"static\">\r\n      <Toolbar>\r\n        <div className={style.itemForm}/>\r\n        <div className={style.itemForm}>\r\n          {isLoggedIn && <AddNewItemForm\r\n            placeholder={'Enter to do list name '}\r\n            addItem={addTodoList}\r\n          />}\r\n          {!isLoggedIn && <Typography variant=\"h4\">To Do List!</Typography>}\r\n        </div>\r\n        {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n      </Toolbar>\r\n      {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n    </AppBar>\r\n  )\r\n}","export type TasksStateType = { [key: string]: Array<TaskType> }\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\nexport type TodoListDomainType = TodoListType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n}\r\n\r\nexport type TodoListType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  fieldsErrors?: Array<FieldErrorType>\r\n  data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\n","import React, {useCallback, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\nimport style from './EditableSpan.module.css'\r\n\r\ntype PropsType = {\r\n  value: string\r\n  onChange: (title: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = React.memo((props: PropsType) => {\r\n\r\n  const [isEditMode, setIsEditMode] = useState(false)\r\n  const [title, setTitle] = useState('')\r\n\r\n\r\n  const activeEditMode = useCallback(() => {\r\n    setIsEditMode(true)\r\n    setTitle(props.value)\r\n  }, [props.value])\r\n\r\n  const deActiveEditMode = useCallback(() => {\r\n    props.onChange(title)\r\n    setIsEditMode(false)\r\n  }, [props, title])\r\n\r\n  const onKeYPress = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === 'Enter') {\r\n      props.onChange(title)\r\n      setIsEditMode(false)\r\n    }\r\n  }, [props, title])\r\n\r\n  const onTitleChanged = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(event.currentTarget.value)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {isEditMode\r\n        ? <TextField\r\n          value={title}\r\n          onKeyPress={onKeYPress}\r\n          onChange={onTitleChanged}\r\n          autoFocus\r\n          onBlur={deActiveEditMode}\r\n        />\r\n        : <span className={style.span} onDoubleClick={activeEditMode}>{props.value}</span>}\r\n    </>\r\n  )\r\n})\r\n\r\n","import React, {useCallback} from 'react'\r\nimport {Checkbox, Paper} from '@material-ui/core'\r\nimport {TaskStatuses, TaskType} from '../../../../../utils/types'\r\nimport style from '../../../../App.module.scss'\r\nimport {EditableSpan} from '../../../../common/EditableSpan'\r\nimport IconButton from '@material-ui/core/IconButton/IconButton'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {useDispatch} from 'react-redux'\r\nimport {removeTaskTC, updateTaskTC} from '../../../../../redux/tasksReducer'\r\n\r\ntype TaskProps = {\r\n  task: TaskType\r\n}\r\n\r\nexport const Task = (props: TaskProps) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const onChangeHandler = useCallback((e: React.ChangeEvent<HTMLInputElement>) => dispatch(updateTaskTC({\r\n    taskId: props.task.id,\r\n    model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n    todoListId: props.task.todoListId\r\n  })), [props.task])\r\n\r\n  const onChangeTaskTitle = useCallback((title: string) => dispatch(updateTaskTC({\r\n    taskId: props.task.id,\r\n    model: {title},\r\n    todoListId: props.task.todoListId\r\n  })), [props.task])\r\n\r\n  const removeTask = useCallback(() => dispatch(removeTaskTC({\r\n    todoListId: props.task.todoListId,\r\n    taskId: props.task.id\r\n  })), [props.task])\r\n\r\n\r\n  return (\r\n    <Paper key={props.task.id} style={{margin: '6px', padding: '3px'}}>\r\n      <div className={props.task.status === TaskStatuses.Completed ? style.isDone : ''}\r\n           style={{\r\n             padding: '5px',\r\n             display: 'flex',\r\n             alignItems: 'center',\r\n             justifyContent: 'center',\r\n             position: 'relative'\r\n           }}>\r\n        <Checkbox style={{position: 'absolute', left: '2px'}}\r\n                  checked={props.task.status === TaskStatuses.Completed}\r\n                  onChange={onChangeHandler}\r\n                  color=\"primary\"\r\n        />\r\n        <EditableSpan value={props.task.title} onChange={onChangeTaskTitle}/>\r\n        <IconButton style={{position: 'absolute', right: '2px'}}\r\n                    color=\"secondary\"\r\n                    onClick={removeTask}\r\n        >\r\n          <Delete fontSize=\"small\"/>\r\n        </IconButton>\r\n      </div>\r\n    </Paper>\r\n  )\r\n}","import React from 'react'\r\nimport {Task} from './task/Task'\r\nimport {FilterValuesType, TaskStatuses, TaskType} from '../../../../utils/types'\r\n\r\ntype TasksProps = {\r\n  todoListId: string\r\n  todoListFilter: FilterValuesType\r\n  tasks: Array<TaskType>\r\n}\r\n\r\nexport const Tasks = (props: TasksProps) => {\r\n\r\n  let tasksForTodoList = props.tasks\r\n\r\n  if (props.todoListFilter === 'active') {\r\n    tasksForTodoList = props.tasks.filter((t) => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.todoListFilter === 'completed') {\r\n    tasksForTodoList = props.tasks.filter(\r\n      (t) => t.status === TaskStatuses.Completed\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{padding: '10px', height: '160px', overflowY: 'scroll'}}>\r\n      {tasksForTodoList.map(task => <Task key={task.id} task={task}/>)}\r\n      {!tasksForTodoList.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","import {FilterValuesType, TodoListDomainType} from '../../../utils/types'\r\nimport React, {useCallback, useEffect} from 'react'\r\nimport {Button, Grid, Paper, PropTypes} from '@material-ui/core'\r\nimport {EditableSpan} from '../../common/EditableSpan'\r\nimport IconButton from '@material-ui/core/IconButton/IconButton'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {AddNewItemForm} from '../../common/AddNewItemForm'\r\nimport {Tasks} from './tasks/Tasks'\r\nimport {useDispatch} from 'react-redux'\r\nimport {changeTodoListFilterAC, changeTodoListTitleTC, removeTodoListTC} from '../../../redux/todoListsReducer'\r\nimport {addTaskTC, fetchTasksTC} from '../../../redux/tasksReducer'\r\nimport {useAppSelector} from '../../../redux/store'\r\n\r\ntype TodoListProps = {\r\n  todoList: TodoListDomainType\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodoList = ({demo = false, ...props}: TodoListProps) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  const onChangeTodoListTitle = useCallback((title: string) => dispatch(changeTodoListTitleTC({\r\n    todoListId: props.todoList.id,\r\n    title\r\n  })), [props.todoList.id])\r\n\r\n  const addTask = useCallback((title: string) => dispatch(addTaskTC({\r\n    todoListId: props.todoList.id,\r\n    title\r\n  })), [props.todoList.id])\r\n\r\n  const removeTodoList = useCallback(() => dispatch(removeTodoListTC(props.todoList.id)), [props.todoList.id])\r\n\r\n  const onFilterButtonClickHandler = useCallback((buttonFilter) => dispatch(changeTodoListFilterAC({\r\n    todoListId: props.todoList.id,\r\n    filter: buttonFilter\r\n  })), [props.todoList.id])\r\n\r\n  const renderFilterButton = (buttonFilter: FilterValuesType, color: PropTypes.Color, text: string) => {\r\n    return <Button variant={props.todoList.filter === buttonFilter ? 'outlined' : 'text'}\r\n                   onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                   color={color}>{text}\r\n    </Button>\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (demo) {\r\n      return\r\n    }\r\n    dispatch(fetchTasksTC(props.todoList.id))\r\n  }, [props.todoList.id])\r\n\r\n  const tasks = useAppSelector((state) => state.tasks)\r\n\r\n  let allTodolistTasks = tasks[props.todoList.id]\r\n\r\n  return (\r\n    <Grid key={props.todoList.id} style={{width: '480px'}} item>\r\n      <Paper elevation={3} style={{margin: '30px', padding: '10px'}}>\r\n        <div style={{textAlign: 'center'}}>\r\n          <div>\r\n            <div style={{padding: '10px', position: 'relative'}}>\r\n              <b>\r\n                <EditableSpan value={props.todoList.title} onChange={onChangeTodoListTitle}/>\r\n              </b>\r\n              <IconButton style={{position: 'absolute', right: '5px', top: '5px'}}\r\n                          color=\"secondary\"\r\n                          disabled={props.todoList.entityStatus === 'loading'}\r\n              >\r\n                <Delete onClick={removeTodoList} fontSize=\"small\"/>\r\n              </IconButton>\r\n            </div>\r\n            <div>\r\n              <AddNewItemForm placeholder={'Enter task name '} addItem={addTask}/>\r\n              <Tasks tasks={allTodolistTasks} todoListFilter={props.todoList.filter} todoListId={props.todoList.id}/>\r\n              <div>\r\n                {renderFilterButton('active', 'primary', 'Active')}\r\n                {renderFilterButton('completed', 'secondary', 'Completed')}\r\n                {renderFilterButton('all', 'default', 'All')}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Paper>\r\n\r\n    </Grid>\r\n  )\r\n}\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport {Grid} from '@material-ui/core'\r\nimport {TodoList} from './todoList/TodoList'\r\nimport {useAppSelector} from '../../redux/store'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTodoListsTC} from '../../redux/todoListsReducer'\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodoLists = ({demo = false}: PropsType) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const todoLists = useAppSelector((state) => state.todoLists)\r\n  const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return\r\n    }\r\n    dispatch(fetchTodoListsTC())\r\n  }, [dispatch])\r\n\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n  return (\r\n    <Grid container style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n      {todoLists.map((todo) => <TodoList key={todo.id} demo={demo} todoList={todo}/>)}\r\n    </Grid>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch} from 'react-redux'\r\nimport {loginTC} from '../../redux/authReducer'\r\nimport {useAppSelector} from '../../redux/store'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n  const captcha = useAppSelector((state) => state.auth.captcha)\r\n\r\n  const formik = useFormik({\r\n    validate: (values) => {\r\n      if (!values.email) {\r\n        return {\r\n          email: 'Email is required'\r\n        }\r\n      }\r\n      if (!values.password) {\r\n        return {\r\n          password: 'Password is required'\r\n        }\r\n      }\r\n    },\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n      captcha: ''\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values))\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={'/'}/>\r\n  }\r\n\r\n  return <Grid container justify='center'>\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <FormControl>\r\n        <FormLabel>\r\n          <p>To log in get registered -\r\n            <a href={'https://social-network.samuraijs.com/'}>here</a>\r\n          </p>\r\n          <p>or use common test account credentials:</p>\r\n          <p>Email: free@samuraijs.com</p>\r\n          <p>Password: free</p>\r\n        </FormLabel>\r\n        <FormGroup>\r\n          <TextField\r\n            label=\"Email\"\r\n            margin=\"normal\"\r\n            {...formik.getFieldProps('email')}\r\n          />\r\n          {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n          <TextField\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            margin=\"normal\"\r\n            {...formik.getFieldProps('password')}\r\n          />\r\n          {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n          <FormControlLabel\r\n            label={'Remember me'}\r\n            control={<Checkbox\r\n              {...formik.getFieldProps('rememberMe')}\r\n              checked={formik.values.rememberMe}\r\n            />}\r\n          />\r\n          {captcha && <img alt=\"\" src={captcha}/>}\r\n          {captcha && <TextField\r\n            margin=\"normal\"\r\n            {...formik.getFieldProps('captcha')}\r\n          />\r\n          }\r\n          <Button type={'submit'}>Login</Button>\r\n        </FormGroup>\r\n      </FormControl>\r\n    </form>\r\n  </Grid>\r\n}\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../redux/store'\r\nimport {setAppErrorAC} from '../../redux/appReducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackBar = () => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispatch(setAppErrorAC({error: null}))\r\n  }\r\n\r\n  const isOpen = error !== null\r\n\r\n  return (\r\n    <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  )\r\n}","import React, {useEffect} from 'react'\nimport {CircularProgress, Container} from '@material-ui/core'\nimport {Header} from './header/Header'\nimport {TodoLists} from './todoLists/TodoLists'\nimport {Login} from './login/Login'\nimport {Route, Switch} from 'react-router-dom'\nimport {useDispatch} from 'react-redux'\nimport {useAppSelector} from '../redux/store'\nimport {isInitializeAppTC} from '../redux/appReducer'\nimport {ErrorSnackBar} from './common/ErrorSnackbar'\n\ntype PropsType = {\n  demo?: boolean\n}\n\nexport const App = ({demo = false}: PropsType) => {\n  const dispatch = useDispatch()\n\n  const isInitialized = useAppSelector((state) => state.app.isInitialized)\n\n  useEffect(() => {\n    dispatch(isInitializeAppTC())\n  }, [])\n\n\n  if (!isInitialized) {\n    return <div\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n      <CircularProgress/>\n    </div>\n  }\n\n\n  return <div>\n    <Header/>\n    <Container fixed>\n      <ErrorSnackBar/>\n      <Switch>\n        <Route exact path={'/'} render={() => <TodoLists demo={demo}/>}/>\n        <Route path={'/login'} render={() => <Login/>}/>\n      </Switch>\n\n    </Container>\n  </div>\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport {render} from 'react-dom'\nimport './index.css'\nimport {App} from './components/App'\nimport reportWebVitals from './reportWebVitals'\nimport {Provider} from 'react-redux'\nimport {BrowserRouter} from 'react-router-dom'\nimport {store} from './redux/store'\n\nrender(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemForm\":\"App_itemForm__35b9J\",\"title\":\"App_title__TfYMw\"};"],"sourceRoot":""}