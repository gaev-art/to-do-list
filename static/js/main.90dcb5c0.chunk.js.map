{"version":3,"sources":["components/common/AddNewItemForm.tsx","api/instance.ts","api/authApi.ts","redux/appReducer.ts","utils/errorUtils.ts","redux/authReducer.ts","api/todoListsApi.ts","redux/todoListsReducer.ts","api/tasksApi.ts","redux/tasksReducer.ts","redux/store.ts","components/header/Header.tsx","utils/types.ts","components/common/EditableSpan.tsx","components/todoLists/todoList/tasks/task/Task.tsx","components/todoLists/todoList/tasks/Tasks.tsx","components/todoLists/todoList/TodoList.tsx","components/todoLists/TodoLists.tsx","components/login/Login.tsx","components/common/ErrorSnackbar.tsx","components/App.tsx","reportWebVitals.ts","index.tsx","components/App.module.scss","components/common/EditableSpan.module.css"],"names":["AddNewItemForm","React","memo","props","useState","title","setTitle","error","setError","onAddItemClick","newTitle","trim","addItem","style","margin","height","TextField","value","onKeyPress","e","key","onChange","event","currentTarget","label","placeholder","helperText","instance","axios","create","baseURL","process","withCredentials","headers","authApi","get","then","res","data","post","delete","isInitializeAppTC","createAsyncThunk","param","thunkAPI","a","resultCode","dispatch","setIsLoggedInAC","slice","createSlice","name","initialState","status","isInitialized","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","extraReducers","builder","addCase","fulfilled","appReducer","reducer","actions","handleServerNetworkError","message","loginTC","response","captchaUrl","url","getCaptchaUrlAC","captcha","rejectWithValue","messages","logoutTC","isLoggedIn","authReducer","todoListsApi","todoListId","put","fetchTodoListsTC","todoLists","removeTodoListTC","changeTodoListEntityStatusAC","addTodoListTC","newTodoList","todoList","item","changeTodoListTitleTC","changeTodoListFilterAC","index","findIndex","tl","id","filter","entityStatus","map","splice","unshift","todoListsReducer","tasksApi","taskId","model","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","length","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","tasksReducer","forEach","rootReducer","combineReducers","auth","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","window","TaskStatuses","TaskPriorities","Header","useDispatch","addTodoList","useCallback","logout","AppBar","color","position","Toolbar","className","itemForm","Typography","variant","Button","onClick","LinearProgress","EditableSpan","isEditMode","setIsEditMode","activeEditMode","deActiveEditMode","onKeYPress","onTitleChanged","styles","checked","lineThrough","span","autoFocus","onBlur","onDoubleClick","Task","onChangeHandler","Completed","New","onChangeTaskTitle","removeTask","Paper","draggable","padding","isDone","display","alignItems","justifyContent","Checkbox","left","right","Delete","fontSize","Tasks","tasksForTodoList","todoListFilter","overflowY","TodoList","demo","onChangeTodoListTitle","addTask","removeTodoList","onFilterButtonClickHandler","buttonFilter","renderFilterButton","text","useEffect","allTodolistTasks","Grid","width","elevation","textAlign","top","disabled","TodoLists","container","todo","to","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","handleSubmit","FormControl","FormLabel","href","FormGroup","getFieldProps","errors","type","FormControlLabel","control","alt","src","Alert","ErrorSnackBar","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","Container","fixed","exact","path","render","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.90dcb5c0.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport {TextField} from '@material-ui/core'\n\ntype PropsType = {\n  placeholder: string\n  addItem: (title: string) => void\n}\n\n\nexport const AddNewItemForm = React.memo((props: PropsType) => {\n\n  const [title, setTitle] = useState('')\n  const [error, setError] = useState<string | null>('')\n\n\n  const onKeYPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (error !== null) {\n      setError(null)\n    }\n    if (e.key === 'Enter') {\n      onAddItemClick()\n    }\n  }\n\n  const onAddItemClick = () => {\n    let newTitle = title.trim()\n    if (newTitle !== '') {\n      props.addItem(newTitle)\n      setTitle('')\n\n    } else {\n      setError('Title is required')\n    }\n  }\n\n  const onTitleChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value)\n  }\n\n\n  return (\n    <div style={{margin: '15px', height: '60px'}}>\n      <TextField\n        value={title}\n        onKeyPress={onKeYPress}\n        onChange={onTitleChanged}\n        label={props.placeholder}\n        error={!!error}\n        helperText={error}\n      />\n    </div>\n  )\n\n})\n","import axios from 'axios'\n\nexport const instance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n  headers: {'API-KEY': process.env.REACT_APP_API_KEY}\n})","import {instance} from './instance'\nimport {LoginParamsType, ResponseType} from '../utils/types'\n\n\nexport const authApi = {\n  me() {\n    return instance.get<ResponseType<{ id: string, email: string, login: string }>>(`auth/me`)\n      .then(res => res.data)\n  },\n  login(data: LoginParamsType) {\n    return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\n      .then(res => res.data)\n  },\n  logout() {\n    return instance.delete(`auth/login`)\n  },\n  getCaptchaUrl() {\n    return instance.get(`security/get-captcha-url`)\n  }\n}","import {authApi} from '../api/authApi'\nimport {setIsLoggedInAC} from './authReducer'\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\n\n\nexport const isInitializeAppTC = createAsyncThunk('app/isInitializeApp', async (param, thunkAPI) => {\n  const response = await authApi.me()\n  if (response.resultCode === 0) {\n    thunkAPI.dispatch(setIsLoggedInAC())\n  }\n})\n\n\nconst slice = createSlice({\n  name: 'app',\n  initialState: {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false as boolean\n  },\n  reducers: {\n    setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\n      state.error = action.payload.error\n    },\n    setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\n      state.status = action.payload.status\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(isInitializeAppTC.fulfilled, state => {\n      state.isInitialized = true\n    })\n  }\n})\n\nexport const appReducer = slice.reducer\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\n\n\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\n","import {Dispatch} from 'redux'\nimport {ResponseType} from './types'\nimport {setAppErrorAC, setAppStatusAC} from '../redux/appReducer'\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<any>) => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC({error: data.messages[0]}))\n  } else {\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\n  }\n  dispatch(setAppStatusAC({status: 'failed'}))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<any>) => {\n  dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\n  dispatch(setAppStatusAC({status: 'failed'}))\n}\n","import {setAppErrorAC, setAppStatusAC} from './appReducer'\nimport {authApi,} from '../api/authApi'\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {LoginParamsType} from '../utils/types'\nimport {handleServerNetworkError} from '../utils/errorUtils'\n\n\nexport const loginTC = createAsyncThunk(\n  'auth/login',\n  async (param: LoginParamsType, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      const response = await authApi.login(param)\n      if (response.resultCode === 0) {\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n      } else {\n        if (response.resultCode === 10) {\n          const response = await authApi.getCaptchaUrl()\n          const captchaUrl = response.data.url\n          thunkAPI.dispatch(getCaptchaUrlAC({captcha: captchaUrl}))\n          return thunkAPI.rejectWithValue({})\n        }\n        thunkAPI.dispatch(setAppErrorAC({error: response.messages[0]}))\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n        return thunkAPI.rejectWithValue({})\n      }\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue({})\n    }\n  })\nexport const logoutTC = createAsyncThunk(\n  'auth/logout',\n  async (param, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      await authApi.logout()\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue({})\n    }\n  })\n\n\nconst slice = createSlice({\n  name: 'auth',\n  initialState: {\n    isLoggedIn: false,\n    captcha: ''\n  },\n  reducers: {\n    setIsLoggedInAC: state => {\n      state.isLoggedIn = true\n    },\n    getCaptchaUrlAC: (state, action: PayloadAction<{ captcha: string }>) => {\n      state.captcha = action.payload.captcha\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(loginTC.fulfilled, state => {\n      state.isLoggedIn = true\n    })\n    builder.addCase(logoutTC.fulfilled, state => {\n      state.isLoggedIn = false\n    })\n  }\n})\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC, getCaptchaUrlAC} = slice.actions\n\n\n\n","import {instance} from './instance'\nimport {ResponseType, TodoListType} from '../utils/types'\n\nexport const todoListsApi = {\n  getTodoLists() {\n    return instance.get<TodoListType[]>('/todo-lists')\n      .then(res => res.data)\n  },\n  createTodoList(title: string) {\n    return instance.post<ResponseType<{ item: TodoListType }>>('/todo-lists', {title})\n      .then(res => res.data)\n  },\n  deleteTodoList(todoListId: string) {\n    return instance.delete<ResponseType>(`/todo-lists/${todoListId}`)\n      .then(res => res.data)\n  },\n  updateTitleTodoList(todoListId: string, title: string) {\n    return instance.put<ResponseType>(`/todo-lists/${todoListId}`, {title})\n      .then((res) => res.data)\n  },\n}\n\n\n","import {todoListsApi} from '../api/todoListsApi'\nimport {RequestStatusType, setAppStatusAC} from './appReducer'\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {FilterValuesType, TodoListDomainType} from '../utils/types'\nimport {handleServerNetworkError} from '../utils/errorUtils'\n\n\nexport const fetchTodoListsTC = createAsyncThunk(\n  'todoLists/fetchTodoLists',\n  async (param, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      const todoLists = await todoListsApi.getTodoLists()\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n      return {todoLists}\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue(null)\n    }\n  })\nexport const removeTodoListTC = createAsyncThunk(\n  'todoLists/removeTodoList',\n  async (todoListId: string, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      thunkAPI.dispatch(changeTodoListEntityStatusAC({todoListId, status: 'loading'}))\n      await todoListsApi.deleteTodoList(todoListId)\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n      return {todoListId}\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue(null)\n    }\n  })\nexport const addTodoListTC = createAsyncThunk(\n  'todoLists/addTodoList',\n  async (title: string, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      const newTodoList = await todoListsApi.createTodoList(title)\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n      return {todoList: newTodoList.data.item}\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue(null)\n    }\n  })\nexport const changeTodoListTitleTC = createAsyncThunk(\n  'todoLists/changeTodoListTitle',\n  async (param: { todoListId: string, title: string }, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      await todoListsApi.updateTitleTodoList(param.todoListId, param.title)\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n      return {todoListId: param.todoListId, title: param.title}\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue(null)\n    }\n  })\n\n\nconst slice = createSlice({\n  name: 'todoLists',\n  initialState: [] as TodoListDomainType[],\n  reducers: {\n    changeTodoListFilterAC(state, action: PayloadAction<{ todoListId: string, filter: FilterValuesType }>) {\n      const index = state.findIndex(tl => tl.id === action.payload.todoListId)\n      state[index].filter = action.payload.filter\n    },\n    changeTodoListEntityStatusAC(state, action: PayloadAction<{ todoListId: string, status: RequestStatusType }>) {\n      const index = state.findIndex(tl => tl.id === action.payload.todoListId)\n      state[index].entityStatus = action.payload.status\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\n      return action.payload.todoLists.map(tl => ({...tl, filter: 'active', entityStatus: 'idle'}))\n    })\n    builder.addCase(removeTodoListTC.fulfilled, (state, action) => {\n      const index = state.findIndex(tl => tl.id === action.payload.todoListId)\n      if (index > -1) state.splice(index, 1)\n    })\n    builder.addCase(addTodoListTC.fulfilled, (state, action) => {\n      state.unshift({...action.payload.todoList, filter: 'active', entityStatus: 'idle'})\n    })\n    builder.addCase(changeTodoListTitleTC.fulfilled, (state, action) => {\n      const index = state.findIndex(tl => tl.id === action.payload.todoListId)\n      state[index].title = action.payload.title\n    })\n  }\n})\n\nexport const todoListsReducer = slice.reducer\nexport const {changeTodoListFilterAC, changeTodoListEntityStatusAC} = slice.actions\n\n\n","import { instance } from './instance'\nimport { GetTasksResponse, ResponseType, TaskType, UpdateTaskModelType } from '../utils/types'\n\nexport const tasksApi = {\n  getTasks(todoListId: string) {\n    return instance.get<GetTasksResponse>(`/todo-lists/${todoListId}/tasks`)\n\n  },\n  createTask(title: string, todoListId: string) {\n    return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todoListId}/tasks`, { title })\n      .then(res => res.data)\n  },\n  deleteTask(todoListId: string, taskId: string) {\n    return instance.delete<ResponseType>(`/todo-lists/${todoListId}/tasks/${taskId}`)\n      .then(res => res.data)\n  },\n  updateTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseType<TaskType>>(`/todo-lists/${todoListId}/tasks/${taskId}`, model)\n      .then(res => res.data.data)\n  },\n}\n\n","import {AppRootStateType} from './store'\nimport {setAppErrorAC, setAppStatusAC,} from './appReducer'\nimport {handleServerAppError, handleServerNetworkError} from '../utils/errorUtils'\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\nimport {addTodoListTC, fetchTodoListsTC, removeTodoListTC} from './todoListsReducer'\nimport {tasksApi} from '../api/tasksApi'\nimport {TasksStateType, UpdateTaskModelType} from '../utils/types'\n\n\nexport const fetchTasksTC = createAsyncThunk(\n  'tasks/fetchTasks',\n  async (todoListId: string, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      const tasks = await tasksApi.getTasks(todoListId)\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n      return {tasks: tasks.data.items, todoListId}\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue(null)\n    }\n  })\nexport const removeTaskTC = createAsyncThunk(\n  'tasks/removeTask',\n  async (param: { taskId: string, todoListId: string }, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      const response = await tasksApi.deleteTask(param.todoListId, param.taskId)\n      if (response.resultCode === 0) {\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n        return {taskId: param.taskId, todoListId: param.todoListId}\n      } else {\n        thunkAPI.dispatch(setAppErrorAC({error: response.messages[0]}))\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n        return thunkAPI.rejectWithValue(null)\n      }\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue(null)\n    }\n  })\nexport const addTaskTC = createAsyncThunk(\n  'tasks/addTask',\n  async (param: { title: string, todoListId: string }, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      const response = await tasksApi.createTask(param.title, param.todoListId)\n      if (response.resultCode === 0) {\n        thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n        return {task: response.data.item}\n      } else {\n        handleServerAppError(response, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue(null)\n      }\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue(null)\n    }\n  })\nexport const updateTaskTC = createAsyncThunk(\n  'tasks/updateTask',\n  async (param: { taskId: string, model: UpdateTaskModelType, todoListId: string }, thunkAPI) => {\n    try {\n      const state = thunkAPI.getState() as AppRootStateType\n      const task = state.tasks[param.todoListId].find((t) => t.id === param.taskId)\n      if (!task) {\n        return thunkAPI.rejectWithValue('task not found in the state')\n      }\n      const apiModel: UpdateTaskModelType = {\n        deadline: task.deadline,\n        description: task.description,\n        priority: task.priority,\n        startDate: task.startDate,\n        title: task.title,\n        status: task.status,\n        ...param.model,\n      }\n      thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n      await tasksApi.updateTask(param.todoListId, param.taskId, apiModel)\n      thunkAPI.dispatch(setAppStatusAC({status: 'success'}))\n      return {taskId: param.taskId, model: param.model, todoListId: param.todoListId}\n    } catch (error) {\n      handleServerNetworkError(error, thunkAPI.dispatch)\n      return thunkAPI.rejectWithValue(null)\n    }\n  })\n\nconst slice = createSlice({\n  name: 'tasks',\n  initialState: {} as TasksStateType,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(addTodoListTC.fulfilled, (state, action) => {\n      state[action.payload.todoList.id] = []\n    })\n    builder.addCase(removeTodoListTC.fulfilled, (state, action) => {\n      delete state[action.payload.todoListId]\n    })\n    builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\n      action.payload.todoLists.forEach((tl: any) => {\n        state[tl.id] = []\n      })\n    })\n    builder.addCase(addTaskTC.fulfilled, (state, action) => {\n      state[action.payload.task.todoListId].unshift(action.payload.task)\n    })\n      .addCase(fetchTasksTC.fulfilled, (state, action) => {\n        state[action.payload.todoListId] = action.payload.tasks\n      })\n    builder.addCase(removeTaskTC.fulfilled, (state, action) => {\n      const tasks = state[action.payload.todoListId]\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\n      if (index > -1) {\n        tasks.splice(index, 1)\n      }\n    })\n    builder.addCase(updateTaskTC.fulfilled, (state, action) => {\n      const tasks = state[action.payload.todoListId]\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\n      if (index > -1) {\n        tasks[index] = {...tasks[index], ...action.payload.model}\n      }\n    })\n  }\n})\n\nexport const tasksReducer = slice.reducer\n\n","import {combineReducers} from 'redux'\nimport thunk from 'redux-thunk'\nimport {configureStore} from '@reduxjs/toolkit'\nimport {TypedUseSelectorHook, useSelector} from 'react-redux'\nimport {authReducer} from './authReducer'\nimport {appReducer} from './appReducer'\nimport {todoListsReducer} from './todoListsReducer'\nimport {tasksReducer} from './tasksReducer'\n\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  app: appReducer,\n  todoLists: todoListsReducer,\n  tasks: tasksReducer,\n})\n\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\n})\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\n\nexport type RootReducerType = typeof rootReducer\n\nexport type AppRootStateType = ReturnType<RootReducerType>\n\n\n\n\n// @ts-ignore\nwindow.store = store","import React, {useCallback} from 'react'\nimport {AppBar, Button, LinearProgress, Toolbar, Typography} from '@material-ui/core'\nimport style from '../App.module.scss'\nimport {AddNewItemForm} from '../common/AddNewItemForm'\nimport {useDispatch} from 'react-redux'\nimport {logoutTC} from '../../redux/authReducer'\nimport {useAppSelector} from '../../redux/store'\nimport {addTodoListTC} from '../../redux/todoListsReducer'\n\nexport const Header = () => {\n\n  const dispatch = useDispatch()\n\n  const status = useAppSelector((state) => state.app.status)\n  const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\n\n  const addTodoList = useCallback((title: string) => dispatch(addTodoListTC(title)), [])\n  const logout = useCallback(() => dispatch(logoutTC()), [])\n\n  return (\n    <AppBar color=\"inherit\" position=\"static\">\n      <Toolbar>\n        <div className={style.itemForm}/>\n        <div className={style.itemForm}>\n          {isLoggedIn && <AddNewItemForm\n            placeholder={'Enter to do list name '}\n            addItem={addTodoList}\n          />}\n          {!isLoggedIn && <Typography variant=\"h4\">To Do List!</Typography>}\n        </div>\n        {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log out</Button>}\n      </Toolbar>\n      {status === 'loading' && <LinearProgress color=\"secondary\"/>}\n    </AppBar>\n  )\n}","export type TasksStateType = { [key: string]: Array<TaskType> }\nexport type FilterValuesType = 'all' | 'active' | 'completed'\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\nexport type TodoListDomainType = TodoListType & {\n  filter: FilterValuesType\n  entityStatus: RequestStatusType\n}\n\n\nexport type LoginParamsType = {\n  email: string\n  password: string\n  rememberMe: boolean\n  captcha?: string\n}\n\nexport type TodoListType = {\n  id: string\n  title: string\n  addedDate: string\n  order: number\n}\nexport type FieldErrorType = { field: string; error: string }\n\n\nexport type ResponseType<D = {}> = {\n  resultCode: number\n  messages: Array<string>\n  fieldsErrors?: Array<FieldErrorType>\n  data: D\n}\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4\n}\n\nexport type TaskType = {\n  description: string\n  title: string\n  status: TaskStatuses\n  priority: TaskPriorities\n  startDate: string\n  deadline: string\n  id: string\n  todoListId: string\n  order: number\n  addedDate: string\n}\nexport type UpdateTaskModelType = {\n  title?: string\n  description?: string\n  status?: TaskStatuses\n  priority?: TaskPriorities\n  startDate?: string\n  deadline?: string\n}\nexport type GetTasksResponse = {\n  error: string | null\n  totalCount: number\n  items: TaskType[]\n}\n","import React, {useCallback, useState} from 'react'\nimport {TextField} from '@material-ui/core'\nimport style from './EditableSpan.module.css'\nimport {TaskStatuses} from '../../utils/types'\n\ntype PropsType = {\n  value: string\n  onChange: (title: string) => void\n  checked?: TaskStatuses\n}\n\n\nexport const EditableSpan = React.memo((props: PropsType) => {\n  const [isEditMode, setIsEditMode] = useState(false)\n  const [title, setTitle] = useState('')\n\n\n  const activeEditMode = useCallback(() => {\n    setIsEditMode(true)\n    setTitle(props.value)\n  }, [props.value])\n\n  const deActiveEditMode = useCallback(() => {\n    props.onChange(title)\n    setIsEditMode(false)\n  }, [props, title])\n\n  const onKeYPress = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      props.onChange(title)\n      setIsEditMode(false)\n    }\n  }, [props, title])\n\n  const onTitleChanged = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value)\n  }, [])\n\n  const styles = !props.checked ? `${style.span}` : `${style.lineThrough}`\n\n  return (\n    <>\n      {isEditMode\n        ? <TextField\n          value={title}\n          onKeyPress={onKeYPress}\n          onChange={onTitleChanged}\n          autoFocus\n          onBlur={deActiveEditMode}\n        />\n        : <span className={styles} onDoubleClick={activeEditMode}>{props.value}</span>}\n    </>\n  )\n})\n\n","import React, {useCallback} from 'react'\nimport {Checkbox, Paper} from '@material-ui/core'\nimport {TaskStatuses, TaskType} from '../../../../../utils/types'\nimport style from '../../../../App.module.scss'\nimport {EditableSpan} from '../../../../common/EditableSpan'\nimport IconButton from '@material-ui/core/IconButton/IconButton'\nimport {Delete} from '@material-ui/icons'\nimport {useDispatch} from 'react-redux'\nimport {removeTaskTC, updateTaskTC} from '../../../../../redux/tasksReducer'\n\ntype TaskProps = {\n  task: TaskType\n}\n\nexport const Task = (props: TaskProps) => {\n  const dispatch = useDispatch()\n\n  const onChangeHandler = useCallback((e: React.ChangeEvent<HTMLInputElement>) => dispatch(updateTaskTC({\n    taskId: props.task.id,\n    model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\n    todoListId: props.task.todoListId\n  })), [props.task])\n\n  const onChangeTaskTitle = useCallback((title: string) => dispatch(updateTaskTC({\n    taskId: props.task.id,\n    model: {title},\n    todoListId: props.task.todoListId\n  })), [props.task])\n\n  const removeTask = useCallback(() => dispatch(removeTaskTC({\n    todoListId: props.task.todoListId,\n    taskId: props.task.id\n  })), [props.task])\n\n  return (\n    <Paper draggable={true}\n           key={props.task.id} style={{margin: '6px', padding: '3px'}}>\n      <div className={props.task.status === TaskStatuses.Completed ? style.isDone : ''}\n           style={{\n             padding: '5px',\n             display: 'flex',\n             alignItems: 'center',\n             justifyContent: 'center',\n             position: 'relative'\n           }}>\n        <Checkbox style={{position: 'absolute', left: '2px'}}\n                  checked={props.task.status === TaskStatuses.Completed}\n                  onChange={onChangeHandler}\n                  color=\"primary\"\n        />\n        <EditableSpan value={props.task.title} checked={props.task.status} onChange={onChangeTaskTitle}/>\n        <IconButton style={{position: 'absolute', right: '2px'}}\n                    color=\"secondary\"\n                    onClick={removeTask}\n        >\n          <Delete fontSize=\"small\"/>\n        </IconButton>\n      </div>\n    </Paper>\n  )\n}","import React from 'react'\nimport {Task} from './task/Task'\nimport {FilterValuesType, TaskStatuses, TaskType} from '../../../../utils/types'\n\ntype TasksProps = {\n  todoListId: string\n  todoListFilter: FilterValuesType\n  tasks: Array<TaskType>\n}\n\nexport const Tasks = (props: TasksProps) => {\n\n  let tasksForTodoList = props.tasks\n\n  if (props.todoListFilter === 'active') {\n    tasksForTodoList = props.tasks.filter((t) => t.status === TaskStatuses.New)\n  }\n  if (props.todoListFilter === 'completed') {\n    tasksForTodoList = props.tasks.filter(\n      (t) => t.status === TaskStatuses.Completed\n    )\n  }\n\n  return (\n    <div style={{padding: '10px', height: '160px', overflowY: 'scroll'}}>\n      {tasksForTodoList.map(task => <Task key={task.id} task={task}/>)}\n      {!tasksForTodoList.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\n    </div>\n  )\n}\n\n\n","import {FilterValuesType, TodoListDomainType} from '../../../utils/types'\nimport React, {useCallback, useEffect} from 'react'\nimport {Button, Grid, Paper, PropTypes} from '@material-ui/core'\nimport {EditableSpan} from '../../common/EditableSpan'\nimport IconButton from '@material-ui/core/IconButton/IconButton'\nimport {Delete} from '@material-ui/icons'\nimport {AddNewItemForm} from '../../common/AddNewItemForm'\nimport {Tasks} from './tasks/Tasks'\nimport {useDispatch} from 'react-redux'\nimport {changeTodoListFilterAC, changeTodoListTitleTC, removeTodoListTC} from '../../../redux/todoListsReducer'\nimport {addTaskTC, fetchTasksTC} from '../../../redux/tasksReducer'\nimport {useAppSelector} from '../../../redux/store'\n\ntype TodoListProps = {\n  todoList: TodoListDomainType\n  demo?: boolean\n}\n\nexport const TodoList = ({demo = false, ...props}: TodoListProps) => {\n\n  const dispatch = useDispatch()\n\n\n  const onChangeTodoListTitle = useCallback((title: string) => dispatch(changeTodoListTitleTC({\n    todoListId: props.todoList.id,\n    title\n  })), [props.todoList.id])\n\n  const addTask = useCallback((title: string) => dispatch(addTaskTC({\n    todoListId: props.todoList.id,\n    title\n  })), [props.todoList.id])\n\n  const removeTodoList = useCallback(() => dispatch(removeTodoListTC(props.todoList.id)), [props.todoList.id])\n\n  const onFilterButtonClickHandler = useCallback((buttonFilter) => dispatch(changeTodoListFilterAC({\n    todoListId: props.todoList.id,\n    filter: buttonFilter\n  })), [props.todoList.id])\n\n  const renderFilterButton = (buttonFilter: FilterValuesType, color: PropTypes.Color, text: string) => {\n    return <Button variant={props.todoList.filter === buttonFilter ? 'outlined' : 'text'}\n                   onClick={() => onFilterButtonClickHandler(buttonFilter)}\n                   color={color}>{text}\n    </Button>\n  }\n\n  useEffect(() => {\n    if (demo) {\n      return\n    }\n    dispatch(fetchTasksTC(props.todoList.id))\n  }, [props.todoList.id])\n\n  const tasks = useAppSelector((state) => state.tasks)\n\n  let allTodolistTasks = tasks[props.todoList.id]\n\n  return (\n    <Grid style={{width: '480px'}} item>\n      <Paper elevation={3} style={{margin: '30px', padding: '10px'}}>\n        <div style={{textAlign: 'center'}}>\n          <div>\n            <div style={{padding: '10px', position: 'relative'}}>\n              <b>\n                <EditableSpan value={props.todoList.title} onChange={onChangeTodoListTitle}/>\n              </b>\n              <IconButton style={{position: 'absolute', right: '5px', top: '5px'}}\n                          color=\"secondary\"\n                          disabled={props.todoList.entityStatus === 'loading'}\n              >\n                <Delete onClick={removeTodoList} fontSize=\"small\"/>\n              </IconButton>\n            </div>\n            <div>\n              <AddNewItemForm placeholder={'Enter task name '} addItem={addTask}/>\n              <Tasks\n                tasks={allTodolistTasks}\n                todoListFilter={props.todoList.filter}\n                todoListId={props.todoList.id}/>\n              <div>\n                {renderFilterButton('active', 'primary', 'Active')}\n                {renderFilterButton('completed', 'secondary', 'Completed')}\n                {renderFilterButton('all', 'default', 'All')}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Paper>\n\n    </Grid>\n  )\n}\n\n\n\n","import React, {useEffect} from 'react'\nimport {Grid} from '@material-ui/core'\nimport {TodoList} from './todoList/TodoList'\nimport {useAppSelector} from '../../redux/store'\nimport {Redirect} from 'react-router-dom'\nimport {useDispatch} from 'react-redux'\nimport {fetchTodoListsTC} from '../../redux/todoListsReducer'\n\ntype PropsType = {\n  demo?: boolean\n}\n\nexport const TodoLists = ({demo = false}: PropsType) => {\n  const dispatch = useDispatch()\n\n  const todoLists = useAppSelector((state) => state.todoLists)\n  const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\n\n  useEffect(() => {\n    if (demo || !isLoggedIn) {\n      return\n    }\n    dispatch(fetchTodoListsTC())\n  }, [dispatch])\n\n\n  if (!isLoggedIn) {\n    return <Redirect to={'/login'}/>\n  }\n\n  return (\n    <Grid container style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n      {todoLists.map((todo) => <TodoList key={todo.id} demo={demo} todoList={todo}/>)}\n    </Grid>\n  )\n}\n\n\n","import React from 'react'\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\nimport {useFormik} from 'formik'\nimport {useDispatch} from 'react-redux'\nimport {loginTC} from '../../redux/authReducer'\nimport {useAppSelector} from '../../redux/store'\nimport {Redirect} from 'react-router-dom'\n\nexport const Login = () => {\n\n  const dispatch = useDispatch()\n\n  const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\n  const captcha = useAppSelector((state) => state.auth.captcha)\n\n  const formik = useFormik({\n    validate: (values) => {\n      if (!values.email) {\n        return {\n          email: 'Email is required'\n        }\n      }\n      if (!values.password) {\n        return {\n          password: 'Password is required'\n        }\n      }\n    },\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n      captcha: ''\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values))\n    },\n  })\n\n  if (isLoggedIn) {\n    return <Redirect to={'/to-do-list'}/>\n  }\n\n  return <Grid container justify='center'>\n    <form onSubmit={formik.handleSubmit}>\n      <FormControl>\n        <FormLabel>\n          <p>To log in get registered -\n            <a href={'https://social-network.samuraijs.com/'}>here</a>\n          </p>\n          <p>or use common test account credentials:</p>\n          <p>Email: free@samuraijs.com</p>\n          <p>Password: free</p>\n        </FormLabel>\n        <FormGroup>\n          <TextField\n            label=\"Email\"\n            margin=\"normal\"\n            {...formik.getFieldProps('email')}\n          />\n          {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n          <TextField\n            type=\"password\"\n            label=\"Password\"\n            margin=\"normal\"\n            {...formik.getFieldProps('password')}\n          />\n          {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n          <FormControlLabel\n            label={'Remember me'}\n            control={<Checkbox\n              {...formik.getFieldProps('rememberMe')}\n              checked={formik.values.rememberMe}\n            />}\n          />\n          {captcha && <img alt=\"\" src={captcha}/>}\n          {captcha && <TextField\n            margin=\"normal\"\n            {...formik.getFieldProps('captcha')}\n          />\n          }\n          <Button type={'submit'}>Login</Button>\n        </FormGroup>\n      </FormControl>\n    </form>\n  </Grid>\n}\n\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport {setAppErrorAC} from '../../redux/appReducer'\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport const ErrorSnackBar = () => {\n\n  const dispatch = useDispatch()\n\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n    dispatch(setAppErrorAC({error: null}))\n  }\n\n  const isOpen = error !== null\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  )\n}","import React, {useEffect} from 'react'\nimport {CircularProgress, Container} from '@material-ui/core'\nimport {Header} from './header/Header'\nimport {TodoLists} from './todoLists/TodoLists'\nimport {Login} from './login/Login'\nimport {Route, Switch} from 'react-router-dom'\nimport {useDispatch} from 'react-redux'\nimport {useAppSelector} from '../redux/store'\nimport {isInitializeAppTC} from '../redux/appReducer'\nimport {ErrorSnackBar} from './common/ErrorSnackbar'\n\ntype PropsType = {\n  demo?: boolean\n}\n\nexport const App = ({demo = false}: PropsType) => {\n\n  const dispatch = useDispatch()\n\n  const isInitialized = useAppSelector((state) => state.app.isInitialized)\n\n  useEffect(() => {\n    dispatch(isInitializeAppTC())\n  }, [])\n\n\n  if (!isInitialized) {\n    return <div\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n      <CircularProgress/>\n    </div>\n  }\n\n\n  return <div>\n    <Header/>\n    <Container fixed>\n      <ErrorSnackBar/>\n      <Switch>\n        <Route exact path={'/to-do-list'} render={() => <TodoLists demo={demo}/>}/>\n        <Route path={'/login'} render={() => <Login/>}/>\n      </Switch>\n\n    </Container>\n  </div>\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport {render} from 'react-dom'\nimport './index.css'\nimport {App} from './components/App'\nimport reportWebVitals from './reportWebVitals'\nimport {Provider} from 'react-redux'\nimport {BrowserRouter} from 'react-router-dom'\nimport {store} from './redux/store'\n\nrender(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemForm\":\"App_itemForm__34iWt\",\"title\":\"App_title__2WSYy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"EditableSpan_span__366cl\",\"lineThrough\":\"EditableSpan_lineThrough__3rcnF\"};"],"sourceRoot":""}